var grid = []
var linha = []
var celula
var full = "██"
var empt = "  "
var vizinhos = 0
var linhas_totais
var colunas_totais
var linha_vizinha
var coluna_vizinha
var novo_grid = []
var vizinhos_vivos
var estado_atual
var tamanho = 0

func gerar_grid()
    ? !tamanho 
        tamanho = 10
    grid.Clear()  // Limpar o grid ao invés de recriá-lo
    for i = 0..tamanho - 1
        linha = []  // Inicializar uma nova linha a cada iteração
        for j = 0..tamanho - 1
            celula = rng % 2
            linha.Add(celula)
        grid.Add(linha)
    return grid

func exibir_grid()
    for linhaIdx = 0..grid.Count() - 1
        linha = grid[linhaIdx]
        for celulaIdx = 0..linha.Count() - 1
            celula = linha[celulaIdx]
            ? celula = 1
                > `@celulaIdx * 2@,@linhaIdx@,@full@
            :
                > `@celulaIdx * 2@,@linhaIdx@,@empt@

func contar_vizinhos_vivos(linha, coluna)
    vizinhos = 0  // Reinicializar os vizinhos
    linhas_totais = grid.Count()
    colunas_totais = grid[0].Count()

    for i = -1..2
        for j = -1..2
            ? i = 0 & j = 0
                continue
            linha_vizinha = linha + i
            coluna_vizinha = coluna + j
            ? linha_vizinha >= 0 & linha_vizinha < linhas_totais & coluna_vizinha >= 0 & coluna_vizinha < colunas_totais
                vizinhos += grid[linha_vizinha][coluna_vizinha]
    return vizinhos

func executar_vida()
    tamanho = grid.Count()
    novo_grid.Clear()  // Limpar o novo grid ao invés de recriá-lo
    
    for i = 0..tamanho - 1
        linha = []  // Inicializar uma nova linha a cada iteração
        for j = 0..tamanho - 1
            linha.Add(0)  // Inicializar com zeros
        novo_grid.Add(linha)
        
    for linhaIdx = 0..tamanho - 1
        for colunaIdx = 0..tamanho - 1
            vizinhos_vivos = contar_vizinhos_vivos(linhaIdx, colunaIdx)
            estado_atual = grid[linhaIdx][colunaIdx]
            ? estado_atual = 1 & (vizinhos_vivos < 2 | vizinhos_vivos > 3)
                novo_grid[linhaIdx][colunaIdx] = 0
            :? estado_atual = 1 & (vizinhos_vivos = 2 | vizinhos_vivos = 3)
                novo_grid[linhaIdx][colunaIdx] = 1
            :? estado_atual = 0 & vizinhos_vivos = 3
                novo_grid[linhaIdx][colunaIdx] = 1
            :
                novo_grid[linhaIdx][colunaIdx] = estado_atual
    grid = novo_grid  // Substituir o grid original pelo novo grid

func jogar_vida(iteracoes)
    ? !tamanho
        tamanho = 10
    gerar_grid()
    for i = 0..iteracoes
        ? totaltime % 10 = 0
            exibir_grid()
        executar_vida()

? totaltime > 100
    jogar_vida(1000)
